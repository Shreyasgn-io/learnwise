model QuizCard {
  id              String           @id @default(uuid())
  videoId         String
  userId          String
  question        String
  answer          String
  type            QuizType
  difficulty      Int              @default(1)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  reviewSchedules ReviewSchedule[]
  Video           Video            @relation(fields: [videoId], references: [id])

  @@index([videoId])
  @@index([userId])
}

enum QuizType {
  MULTIPLE_CHOICE
  OPEN_ENDED
  FILL_IN_BLANK
  TIMESTAMP_RECALL
  CODING
}

model ReviewSchedule {
  id          String   @id @default(uuid())
  quizCardId  String
  userId      String
  nextReview  DateTime
  easeFactor  Float    @default(2.5)
  interval    Int      @default(1)
  repetitions Int      @default(0)
  lastReview  DateTime @default(now())
  confidence  Int      @default(3)

  quizCard QuizCard @relation(fields: [quizCardId], references: [id])

  @@index([userId])
  @@index([nextReview])
}

model Note {
  id        String   @id @default(uuid())
  videoId   String
  userId    String
  content   String
  timestamp Float    @default(0)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Video     Video    @relation(fields: [videoId], references: [id])

  @@index([videoId])
  @@index([userId])
}

model ExportHistory {
  id         String   @id @default(uuid())
  userId     String
  exportedAt DateTime @default(now())

  @@index([userId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Invoice {
  id         String   @id @default(uuid())
  customerId String
  amount     Float
  status     String
  dueDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

model User {
  id          String             @id @default(uuid())
  email       String             @unique
  preferences Json?              @default("{}")
  xp          Int                @default(0)
  streak      Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  playlists   Playlist[]
  notes       Note[]
  progress    LearningProgress[]
  reviews     ReviewQueue[]
}

model Playlist {
  id        String   @id @default(uuid())
  url       String
  title     String
  tags      Json     @default("[]")
  userId    String
  videos    Video[]
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Video {
  id         String   @id @default(uuid())
  title      String
  youtubeId  String   @unique
  transcript String?
  summary    String?
  playlistId String?
  createdAt  DateTime @default(now())

  playlist         Playlist?          @relation(fields: [playlistId], references: [id])
  quizCards        QuizCard[]
  notes            Note[]
  LearningProgress LearningProgress[]
  ReviewQueue      ReviewQueue[]
}

model LearningProgress {
  id         String   @id @default(uuid())
  userId     String
  videoId    String
  completed  Boolean  @default(false)
  quizScores Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])
}

model ReviewQueue {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  dueDate   DateTime
  history   Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])
}
